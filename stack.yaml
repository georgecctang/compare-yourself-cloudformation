AWSTemplateFormatVersion: 2010-09-09
Description: Template for the app Compare Yourself from Udemy

Resources:
  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: compare-yourself
      Description: Allow users to compare themselves
  APIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGateway
      ParentId: !GetAtt
      - APIGateway
      - RootResourceId
      PathPart: compare-yourself
  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: APIGateway
      ResourceId:
        Ref: APIResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  PostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref APIGateway
      ResourceId: !Ref APIResource
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: "AWS"
        Uri: !Sub
        - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
        - lambdaArn: !GetAtt "LambdaCyStoreData.Arn"
        IntegrationResponses:
        - StatusCode: 200
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty
  APIDeployment:
    DependsOn: ["OptionsMethod", "PostMethod"]
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref "APIGateway"
      StageName: dev

  LambdaCyStoreData:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          exports.handler = async (event) => {
          // TODO implement
          const response = {
            statusCode: 200,
            body: JSON.stringify('Hello from Lambda!'),
          };
            return response;
          };      
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs14.x
      FunctionName: "cy-store-data"
      Handler: index.handler
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: LambdaLogPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "LambdaCyStoreData.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*/POST/compare-yourself"